let g:mapleader = "\<Space>"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call plug#begin('~/.vim/plugged')

Plug 'easymotion/vim-easymotion'
Plug 'rust-lang/rust.vim'
Plug 'Valloric/YouCompleteMe', { 'for': ['c', 'cpp', 'rust'] }
Plug 'vim-airline/vim-airline'
Plug 'tmux-plugins/vim-tmux'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin'}
Plug 'junegunn/fzf.vim'
Plug 'SirVer/ultisnips', { 'for': ['cpp', 'rust'] }
Plug 'honza/vim-snippets'
Plug 'ervandew/supertab'
Plug 'scrooloose/nerdcommenter'
Plug 'godlygeek/tabular'
Plug 'liuchengxu/space-vim-dark' " with Quantum

call plug#end()

filetype plugin indent on
syntax on

" YouCompleteMe settings

let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/.ycm_extra_conf.py'
let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_confirm_extra_conf=0
let g:ycm_min_num_of_chars_for_completion=4
let g:ycm_filetype_whitelist={'c':1, 'cpp':1, 'rust':1}
let g:ycm_rust_src_path='~/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src'

nnoremap <Leader>g :YcmCompleter GoTo<CR>

" EasyMotion keybinds

let g:EasyMotion_do_mapping=0
map <Leader>s <Plug>(easymotion-bd-f2)

" Airline
set laststatus=2
let g:airline_extensions=['tabline']
let g:airline_powerline_fonts=1
let g:airline_theme='violet'
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#default#section_truncate_width={
    \ 'x': 40,
    \ 'y': 10,
    \ 'z': 60
    \ }
let g:airline_section_y='%{winnr()}'

" Make rainbow active
let g:rainbow_active=1

" Tmux
if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

" UltiSnips
let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']

let g:SuperTabDefaultCompletionType='<C-n>'
let g:SuperTabCrMapping=0

let g:UltiSnipsExpandTrigger='<Tab>'
let g:UltiSnipsJumpForwardTrigger='<Tab>'
let g:UltiSnipsBackwardTrigger='<S-Tab>'
let g:UltiSnipsSnippetsDir=['~/.vim/snippets']

" NERDCommenter
let g:NERDSpaceDelims=1
nmap <Leader>;; <Plug>NERDCommenterToggle
vmap <Leader>;; <Plug>NERDCommenterToggle
omap <Leader>;; <Plug>NERDCommenterToggle

" Fuzzy Finder
let g:fzf_action={
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-s': 'split',
    \ 'ctrl-v': 'vsplit'
    \ }

nmap <Leader>? <Plug>(fzf-maps-n)
xmap <Leader>? <Plug>(fzf-maps-x)
omap <Leader>? <Plug>(fzf-maps-o)

command! -bang -nargs=* F call fzf#vim#grep(
    \ 'rg --column --line-number --no-heading --fixed-strings
    \ --no-ignore --hidden --follow --color=always
    \ -g "*.{cpp,cc,h,hpp,hs,c,go,py,rs,tex}"
    \ -g "!{.git}/*" '
    \ .shellescape(<q-args>), 1,
    \ <bang>0 ? fzf#vim#with_preview('up:60%')
    \         : fzf#vim#with_preview('right:50%:hidden', '?'),
    \ <bang>0)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Theme
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Fix colors

if has('termguicolors')
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

colorscheme space-vim-dark
highlight LineNr guifg='#20af81' guibg='#212121'
highlight NonText guifg='#837b8d'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Options
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set wildmenu
set wildmode=longest:full,full
set invnumber
set wrap
set noendofline binary
set number
set relativenumber
set autoread
set cmdheight=2
set showcmd
set cursorline

" Toggle invisible characters
set list
set listchars=eol:$,tab:>-,trail:.,extends:>,precedes:<

" Discard error bells
set noerrorbells
set belloff=all

" Make backspace behave as it should
set backspace=indent,eol,start
set whichwrap+=<,>,h,l
set encoding=utf-8

" Performance options
set lazyredraw
set ttyfast
set synmaxcol=200
set nobackup
set nowb
set noswapfile

" Tabs/window
set mouse=i
set splitbelow
set splitright

" Indenting
set tabstop=4
set softtabstop=4
set shiftwidth=4
" set expandtab
set shiftround
set smarttab
set autoindent
set smartindent
set cindent
set ruler
set scrolloff=2
set colorcolumn=80

" Search
set hlsearch
set incsearch
set magic
set ignorecase

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Visual mode
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
    echo "@".getcmdline()
    execute ":'<,'>normal @".nr2char(getchar())
endfunction

" Search for selection

function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"
let l:pattern = escape(@", '\\/.*$^~[]') let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set timeoutlen=500
set ttimeoutlen=50

" ESC mappings
set <F13>=jk
imap <F13> <ESC>
set <F14>=kj
imap <F14> <ESC>
map ; :

set pastetoggle=<C-b>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Moving around
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Break long lines
map j gj
map k gk
map ^ g^
map $ g$

" Disable highlight
map <silent> <leader><cr> :noh<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Moving between windows
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Auto-creates window if it doesn't exist
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

map <silent> <C-j> :call WinMove('h')<cr>
map <silent> <C-k> :call WinMove('k')<cr>
map <silent> <C-h> :call WinMove('h')<cr>
map <silent> <C-l> :call WinMove('l')<cr>

map <F2> :w<CR>i
imap <F2> <ESC>:w<CR>i<Right>

map <F3> :tabnew<CR>:e
imap <F3> <ESC>:tabnew<CR>:e

map <F4> :q <CR>
imap <F4> <ESC>:q<CR>i

map <F5> :tabprev<CR>
imap <F5> <ESC>:tabprev<CR>i

map <F6> :tabnext<CR>
imap <F6> <ESC>:tabnext<CR>i

map <F10> :!open -a /Applications/Sublime\ Text.app/ % & <CR>i
imap <F10> <ESC>:!open -a /Applications/Sublime\ Text.app/ % & <CR>i

map ˙ 10h
imap ˙ 10h

map ˚ 10k
imap ˚ 10k

map ¬ 10l
imap ¬ 10l

map ∆ 10j
imap ∆ 10j

function! RunFunc()
    if exists("b:run")
        execute "!time " . b:run
    endif
endfunction

function! DebugFunc()
    if exists("b:debug")
        execute "!" . b:debug
    endif
endfunction

function! CompileFunc(CallBackFunc)
    if exists("b:compile")
        execute "!" . b:compile
        if v:shell_error == 0
            call a:CallBackFunc()
        endif
    else
        call a:CallBackFunc()
    endif
endfunction

" Compile + Run
map <F9> :CompileRun<CR>
imap <F9> <ESC> :CompileRun<CR>i
command! CompileRun :call CompileFunc(function('RunFunc'))

" Debug
map <F8> :Debug<CR>
imap <F8> :Debug<CR>i
command! Debug :call CompileFunc(function('DebugFunc'))

" C/C++
autocmd FileType c let b:compile='clang -g -Wall -Wextra % -o %< -lm'
autocmd FileType cpp let b:compile='clang++ -g -std=c++2a -Wall -Wextra -Wfatal-errors -fsanitize=undefined,address -include /usr/local/include/debug.h -lm -Wl,-stack_size,0xd0000000 % -o _%<'
autocmd FileType c,cpp let b:run='./_%<'
autocmd FileType cpp  let b:debug='lldb _%<'

" Rust
autocmd FileType rust let b:compile='rustc -g % -o _%<'
autocmd FileType rust let b:run='./_%<'
autocmd FileType rust let b:debug='lldb _%<'

" Python
autocmd FileType python let b:run='python3 %'

" Bash
autocmd FileType bash setlocal noexpandtab
autocmd FileType bash let b:run='bash %'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Don't mind me
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! TrimWhiteSpaces()
    %s/\s\+$//e
endfunction

autocmd BufWrite * :call TrimWhiteSpaces()

set expandtab
