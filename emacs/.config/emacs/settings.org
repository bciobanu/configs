# TITLE: Settings
# AUTHOR: Bogdan Ciobanu

* Foreword
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC
** Measuring start up time
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
  (lambda()
     (message (format "Emacs ready in %.2f seconds" 
                      (float-time 
                        (time-subtract after-init-time 
                                       before-init-time))))))
#+END_SRC
  
* General
** Modes
#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode 1)
(global-display-fill-column-indicator-mode 1)
(blink-cursor-mode -1)
(global-hl-line-mode 1)
#+END_SRC

** Options
#+BEGIN_SRC emacs-lisp
(setq menu-bar-mode nil
      tool-bar-mode nil
      scroll-bar-mode nil
      ring-bell-function 'ignore
      show-parent-delay 0
      display-line-numbers-type 'relative)
(defalias 'yes-or-no-p 'y-or-n-p) ; Shorthand for yes-no
(set-default 'truncate-lines t)   ; Do not truncate long lines
#+END_SRC

*** Temporary files
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil
      create-lockfiles nil
      make-backup-files nil
      custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC

*** Indenting
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4
              fill-column 80
              indent-tabs-mode nil)
#+END_SRC

* Packages
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC

** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :custom
  (evil-want-C-u-scroll t)
  (evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

(use-package evil-magit
  :custom
  (evil-magit-state 'motion)
  :after evil magit)

(use-package evil-lion
  :config
  (evil-lion-mode)
  :after evil)

(use-package avy
  :after evil)
#+END_SRC

** Completion
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :config
  (ivy-mode))

(use-package counsel
  :after ivy
  :config
  (counsel-mode 1))

(use-package company
  :commands (company-complete-common company-dabbrev)
  :config
  (global-company-mode))
(use-package which-key
  :config
  (which-key-mode))
(use-package bind-map)
#+END_SRC
  
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t
      org-src-fontify-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0
      org-startup-indented t)
#+END_SRC

** Ledger
#+BEGIN_SRC emacs-lisp
(setq ledger-binary-path "/usr/local/bin/ledger")
(use-package ledger-mode)
#+END_SRC

** Garbage collector magic hack
#+BEGIN_SRC emacs-lisp
(use-package gcmh
  :init
  (gcmh-mode 1))
#+END_SRC

* Keybindings
#+BEGIN_SRC emacs-lisp
(bind-map leader-map
  :evil-keys ("SPC")
  :evil-states (normal motion visual)
  :override-minor-modes t)

(bind-map file-leader-map    :evil-keys ("SPC f"))
(bind-map project-leader-map :evil-keys ("SPC p"))
(bind-map buffer-leader-map  :evil-keys ("SPC b"))
(bind-map ledger-leader-map  :evil-keys ("SPC m")
                             :major-modes (ledger-mode))
(bind-map org-leader-map     :evil-keys ("SPC m")
                             :major-modes (org-mode))
(bind-map magit-leader-map   :evil-keys ("SPC g"))

(evil-global-set-key 'normal "s" 'avy-goto-char-2)
(bind-keys :map leader-map
           (":" . counsel-M-x))
(bind-keys :map file-leader-map
           ("s" . save-buffer)
           ("f" . counsel-find-file)
           ("r" . delete-file))
(bind-keys :map project-leader-map
           ;; TODO: this should be project-switch-project
           ("p" . project-find-file))
(bind-keys :map buffer-leader-map
           ("b" . switch-to-buffer)
           ("d" . kill-current-buffer)
           ("n" . next-buffer)
           ("N" . evil-buffer-new)
           ("p" . previous-buffer)) 
(bind-keys :map ledger-leader-map
           ("a" . ledger-add-transaction)
           ("r" . ledger-report))
(bind-keys :map magit-leader-map
           ("g" . magit-status)
           ("b" . magit-branch-checkout)
           ("B" . magit-blame)
           ("/" . magit-dispatch))
(bind-keys :map org-leader-map
           ("c" . org-edit-special))
#+END_SRC

* UI
#+BEGIN_SRC emacs-lisp
(setq initial-frame-alist
      '((tool-bar-lines . 0)
        (background-color . "#f0fff0")))
(setq default-frame-alist initial-frame-alist)
#+END_SRC
